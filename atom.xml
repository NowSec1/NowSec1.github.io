<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://localhost:4000</id>
    <title>NowSec</title>
    <updated>2020-01-22T09:40:42.536Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://localhost:4000"/>
    <link rel="self" href="http://localhost:4000/atom.xml"/>
    <subtitle>在路上点滴挪步，不骄不躁</subtitle>
    <logo>http://localhost:4000/images/avatar.png</logo>
    <icon>http://localhost:4000/favicon.ico</icon>
    <rights>All rights reserved 2020, NowSec</rights>
    <entry>
        <title type="html"><![CDATA[攻防世界_Web进阶区_FileUpload]]></title>
        <id>http://localhost:4000/post/gong-fang-shi-jie-_web-jin-jie-qu-_fileupload</id>
        <link href="http://localhost:4000/post/gong-fang-shi-jie-_web-jin-jie-qu-_fileupload">
        </link>
        <updated>2020-01-22T09:37:03.000Z</updated>
        <content type="html"><![CDATA[<p>1.上传一句话木马，将文件格式将改为图片格式<br>
<img src="http://localhost:4000/post-images/1579685923608.png" alt="" loading="lazy"><br>
2.使用burpsuit抓包并修改文件后缀<br>
<img src="http://localhost:4000/post-images/1579685935909.png" alt="" loading="lazy"><br>
<img src="http://localhost:4000/post-images/1579685941267.png" alt="" loading="lazy"><br>
3.上传成功<br>
<img src="http://localhost:4000/post-images/1579685958760.png" alt="" loading="lazy"><br>
4.使用菜刀连接<br>
<img src="http://localhost:4000/post-images/1579685967089.png" alt="" loading="lazy"><br>
5.连接成功后进入上层目录<br>
<img src="http://localhost:4000/post-images/1579685977793.png" alt="" loading="lazy"><br>
6.打开flag.php即可得到flag<br>
<img src="http://localhost:4000/post-images/1579685983581.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解析漏洞]]></title>
        <id>http://localhost:4000/post/1</id>
        <link href="http://localhost:4000/post/1">
        </link>
        <updated>2020-01-20T17:23:36.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="1什么是解析漏洞">1.什么是解析漏洞</h3>
<p>解析漏洞主要说的是一些特殊文件被IIS、Apache、Nginx在某种情况下被解释成脚本文件格式的漏洞。</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="1什么是解析漏洞">1.什么是解析漏洞</h3>
<p>解析漏洞主要说的是一些特殊文件被IIS、Apache、Nginx在某种情况下被解释成脚本文件格式的漏洞。</p>
<!-- more -->
<h3 id="2iis-5x60解析漏洞">2.IIS 5.X/6.0解析漏洞</h3>
<h4 id="1目录解析">①.目录解析</h4>
<p>/xx.asp/xx.jpg</p>
<p>在网站下建立文件夹的名为为.asp、.asa的文件夹，其目录内的任何扩展名的文件都被IIS当作asp文件来解析并执行<br>
例如创建目录N0Sec.asp，那么/N0Sec.asp/1.jpg将会被当作asp文件来执行。<br>
如果黑客可以控制上传文件夹路径，就可以不管上传后的图片改不改名都能拿到Shell了。</p>
<h4 id="2文件解析">②.文件解析</h4>
<p>xxx.asp;.jpg<br>
在IIS6.0下，分号后面的不被解析，也就是说xxx.asp;.jpg会被服务器解析为xxx.asp<br>
IIS 6.0默认可执行文件除了ASP还包括.asa、.cer、.cdx</p>
<h3 id="3apache解析漏洞">3.Apache解析漏洞</h3>
<pre><code>Apache是从右至左开始判断解析，如果为不可识别解析，就再往左进行判断。
</code></pre>
<p>例如：xxx.php.oef.rar中.oef和.rar这两种后缀不是Apache可以识别的解析，Apache就会将xxx.php.oef.rar解析为xxx.php<br>
如何判断是不是合法后缀就是这个漏洞利用的关键，测试时可以尝试上传一个xxx.php.oef.rar去测试是否为合法后缀(可以尝试将你知道的后缀都写上)，任意不识别的后缀，会逐级向上识别</p>
<h3 id="4iis-70iis-75nginx-803急性解析漏洞">4.IIS 7.0/IIS 7.5/Nginx &lt; 8.03急性解析漏洞</h3>
<pre><code>在默认Fast-CGI开启状况下，黑客上传一个名字为xxx.jpg的文件，内容为
</code></pre>
<pre><code>&lt;?PHP fputs(fopen(‘shell.php’,’w’),&lt;?php eval($_POST[cmd])?&gt;’); ?&gt;
</code></pre>
<p>的文件，然后访问xxx.jpg/.php，在这个目录下就会生成一个一句话木马shell.php，www.xxx.com/logo.gif/*.php出发漏洞，如果存在漏洞，就会将前面的文件当作php执行。</p>
<h3 id="5htaccess文件解析">5.htaccess文件解析</h3>
<pre><code>如果在Apache中.htaccess可被执行，且可被上传。那么可以尝试在.htaccess中写入
</code></pre>
<pre><code>&lt;FileMatch “shell.jpg”&gt;
SetHandler application/x-httpd-php
&lt;/FileMatch&gt;
</code></pre>
<p>然后再上传shell.jpg木马，这样shell.jpg就可以解析为php文件了</p>
]]></content>
    </entry>
</feed>